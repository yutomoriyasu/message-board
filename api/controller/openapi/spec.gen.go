// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWzW7TQBB+lWrg6MYuf6p8QvwIVRyKhHqqKrS1p8kWe3eZnVStIh9CETeO3DkhnoAT",
	"b+MXQbPrNE1iIKLJyfbu/HzftzOznkBha2cNGvaQT8ApUjUyUvg68kgHpbxpAzk4xSNIwKgaIYexR3qn",
	"S0iA8MNYE5aQM40xAV+MsFbidp/wDHK4l86zpHHXpwclNE0zsw75nhMqRsn6RnD8K0IwJOs8NAlEnHip",
	"alch5HsJ8JUTnNowDpEggcvdod3tVsfa8JNH4njkyv9OKh/ioKrq8Azy4wk4sg6JNQZCulxLhdsSHovT",
	"SZOsjeLkhqk9PceCZ7jidr4MCWulqwWpoFT6vR54xfZptzgobA03cT2TNkOJG4/+tm87/dpOf7TTz+30",
	"Wzv91E6/rPot8QtBkg7In9D3IB/PljVj7dc5JwnWRVdE6moFSgy5ikHstDmzkoQ1B6Y1eq+GuHtqFUnV",
	"XyB5baUvskE22JNc1qFRTkMODwfZIIMktEyAmt6gHyLLQ5gp1tZI4cIr5Mha8HlnjY+cH2SZPAprGE3w",
	"U85Vugie6bmX/JM1Gy4mCNxK9AVpxxH/4WsB/zimWtw6MIxkVLXzFukCaeclkaUgI6uhn0ko9QrO+h5i",
	"85buBgV6fmbLq42xWp4ZTRMPeUHEvY2K2KdhhFHeXcgm6WolnXQTtonRKmRc1fdFWO/0vT29j/t5zE3S",
	"brrLAOmruW3UyN9qf9P4t3rcG2oZxcVoVZD5jXQ3TTbfbMt3ZW+zbal6wr9CsIlKLIapbKEqSGBMFeQw",
	"YnZ5mobFkfWc72f7WbwqY9Bl9/b6e3v9q/34c/H/BpqT5ncAAAD//3MzbOYjCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

