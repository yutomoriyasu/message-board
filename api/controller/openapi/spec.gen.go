// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yUvW7UQBDHXyUaKB3b4UvRVgiEUEQRJEQVpdjYc74N9u4yMxfldHJhgugo6akQT0DF",
	"2/hF0O7eXXQfSFekOVvjnf/85j87t4DKdd5ZtMKgFsDVFDsdX18TasGPjPRek+5C6DHhBBQ8Ku6TimVG",
	"EQ+S89BnEN7Ded225xNQFwvw5DySGIzSpg6/eKs73yKokwxk7hEUGCvYIEEGt8eNO15GZ8bKi2fQ9xkQ",
	"fp4ZwhrURVC57LNDqS7XRdzVNVay4oxf1TYhdtq0G5BQa/PJ5KzFvVwG88p1sJZlIWObIGt1h5u54/Bj",
	"HH6Pw7dx+DkOX8fh+27eVndRJFuC/A+ed8lnq7AR7PiQqQWxpbom0vMdlCS5yxDOGTtxoYgYiZ12yKwb",
	"PL5ymmrI4AaJjbOgoMzL/CTUch6t9gYUPM3LvIQMvJZpRC3W9A1KeITOtBhnz2pQ8BYldR342DvLqecn",
	"ZRkelbOCNuZp71tTxczimkP91d0+xBFOvdXIFRkvif/8XTRGdMMrU8L9A+94D+r99kAyE1leuXr+YJzb",
	"69n3aWwbtpw8qC37XEkYdZjr8zSFze9nVpCsbo8+IN0gHb0hcrTPyBDieIbjP8amTOsq3UIGM2pBwVTE",
	"q6KIwaljUaflaZlWPIlup493v8a7v+OXP7DazlS2v+z/BQAA//9cBtNnAgUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
